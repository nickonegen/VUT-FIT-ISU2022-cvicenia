{
	"ISU BODY": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "isu",
		"description": "ISU template with rw32-2022",
		"body": [
			"%include \"rw32-2022.inc\"\n",
			"section .data",
			"    ${1:;data}\n",
			"section .text\n",
			"CMAIN:",
			"    ENTER  0, 0\n",
			"    ${2:;body}\n",
			"    LEAVE",
			"    RET\n",
		]
	},
	"FUNCTION with enter-leave": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "function-enter",
		"description": "Generic function template with ENTER and LEAVE",
		"body": [
			"FUNKCE:",
			"    ENTER  0, 0\n",
			"    ${1:;body}\n",
			"    LEAVE",
			"    RET\n",
		],
	},
	"FUNCTION without enter-leave": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "function",
		"description": "Generic function template",
		"body": [
			"FUNKCE:",
			"    PUSH  EBP",
			"    MOV  EBP, ESP\n",
			"    ${1:;body}\n",
			"    MOV  ESP, EBP",
			"    POP  EBP",
			"    RET\n",
		],
	},
	"IF": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "if",
		"description": "Incomplete IF statement",
		"body": [
			"${1:;CMP/TEST}",
			"JN${2:cc}  .false",
			"    ${3:;true-statement}",
			".false:",
			"    ${4:;false-statement}",
		]
	},
	"IF-ELSE": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "if-else",
		"description": "Complete IF statement",
		"body": [
			"${1:;CMP/TEST}",
			"J${2:cc}  .true",
			".true:",
			"    ${3:;true-statement1}",
			"    JMP  .endif",
			".false:",
			"    ${4:;false-statement}",
			".endif:",
		]
	},
	"WHILE cycle": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "while",
		"description": "While cycle (condition on start)",
		"body": [
			".while:",
			"    ${1:;CMP/TEST}",
			"    JN${2:cc}  .endwhile",
			"    ${3:;while-statement}",
			"    JMP  .while\n",
			".endwhile:\n"
		]
	},
	"DO-WHILE cycle": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "do-while",
		"description": "Do-While cycle (condition on end)",
		"body": [
			".dowhile:",
			"    ${1:;do-statement}",
			"    ${2:;CMP/TEST}",
			"    J${3:cc}  .dowhile"
		]
	},
	"FOR cycle": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "for",
		"description": "For cycle (known number of iterations)",
		"body": [
			".for:",
			"    ${1:;CMP/TEST}",
			"    JN${2:cc}  .endfor",
			"    ${3:;for-statement}",
			"    ${4:;update (ex. DEC  ecx)}",
			"    JMP  .for\n",
			".endfor:"
		]
	},
	"float constant to FPU": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "fpuconst",
		"description": "F.Constant to FPU PUSH",
		"body": [
			"PUSH  __FLOAT32__(${0:1.0})"
		]
	},
	"Move from FPU to CPU": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "fpumove",
		"description": "Move FPU value to CPU",
		"body": [
			";SUB  ESP, 4       <- CLEAN YO STACK!",
			"FSTP  dword [ESP]",
			"MOV  EAX, [ESP]",
			"ADD  ESP, 4",
		]
	},
	"Unmask FPU exceptions": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "fpuunmask",
		"description": "Unmask FPU exceptions",
		"body": [
			"; cw  DW  0    <- add to .data section",
			"FSTCW  [cw]",
			"AND  [cw], word 0xFFF0",
			"FLDCW  [cw]",
		]
	},
	"CN to EFLAGS": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "fpueflags",
		"description": "Condition Flags to EFLAGS",
		"body": [
			";PUSH  EAX",
			"FSTSW  AX",
			"SAHF",
			";POP  EAX"
		]
	},
	"FPU NaNs and infinities": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "FPU_EQU",
		"description": "FPU NaNs/Infinities",
		"body": [
			"FPU_INF_POS  equ  0x7F800000",
			"FPU_INF_NEG  equ  0xFF800000",
			"FPU_SNaN_POS  equ  0x7F800001",
			"FPU_SNaN_NEG  equ  0xFF8004F0",
			"FPU_QNaN_POS  equ  0x7FC00001",
			"FPU_QNaN_NEG  equ  0xFFC004F0"
		]
	}
}