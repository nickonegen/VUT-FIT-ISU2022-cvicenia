{
	"ISU BODY": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "isu",
		"description": "ISU template with rw32-2022",
		"body": [
			"%include \"rw32-2022.inc\"\n",
			"section .data",
			"\t${1:;data}\n",
			"section .text\n",
			"CMAIN:",
			"\tENTER\t0, 0\n",
			"\t${2:;body}\n",
			"\tLEAVE",
			"\tRET",
		]
	},
	"FUNCTION with enter-leave": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "function-enter",
		"description": "Generic function template with ENTER and LEAVE",
		"body": [
			"FUNKCE:",
			"\tENTER\t0, 0\n",
			"\t${1:;body}\n",
			"\tLEAVE",
			"\tRET\n",
		],
	},
	"FUNCTION without enter-leave": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "function",
		"description": "Generic function template",
		"body": [
			"FUNKCE:",
			"\tPUSH\tebp",
			"\tMOV\t\tebp, esp\n",
			"\t${1:;body}\n",
			"\tMOV\t\tesp, ebp",
			"\tPOP\t\tebp",
			"\tRET\n",
		],
	},
	"IF": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "if",
		"description": "Incomplete IF statement",
		"body": [
			"${1:;CMP/TEST}",
			"JN${2:cc}\t.false",
			";(.true:)",
			"\t${3:;true-statement}",
			".false:",
			"\t${4:;false-statement}",
		]
	},
	"IF-ELSE": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "if-else",
		"description": "Complete IF statement",
		"body": [
			"${1:;CMP/TEST}",
			"J${2:cc}\t.true",
			".true:",
			"\t${3:;true-statement1}",
			"\tJMP\t.endif",
			".false:",
			"\t${4:;false-statement}",
			".endif:",
		]
	},
	"WHILE cycle": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "while",
		"description": "While cycle (condition on start)",
		"body": [
			".while:",
			"\t${1:;CMP/TEST}",
			"\tJN${2:cc}\t.endwhile",
			"\t${3:;while-statement}",
			"\tJMP\t.while",
			".endwhile:\n"
		]
	},
	"DO-WHILE cycle": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "do-while",
		"description": "Do-While cycle (condition on end)",
		"body": [
			".dowhile:",
			"\t${1:;do-statement}",
			"\t${2:;CMP/TEST}",
			"\tJ${3:cc}\t.dowhile"
		]
	},
	"FOR cycle": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "for",
		"description": "For cycle (known number of iterations)",
		"body": [
			".for:",
			"\t${1:;CMP/TEST}",
			"\tJN${2:cc}\t.endfor",
			"\t${3:;for-statement}",
			"\t${4:;update (ex. DEC\tecx)}",
			"\tJMP\t.for",
			".endfor:"
		]
	},
	"float constant to FPU": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "fpuconst",
		"description": "F.Constant to FPU PUSH",
		"body": [
			"PUSH    __FLOAT32__(${0:1.0})"
		]
	},
	"Move from FPU to CPU": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "fpumove",
		"description": "Move FPU value to CPU",
		"body": [
			";SUB \tesp, 4\t\t<- CLEAN YO STACK!",
			"FSTP\tdword [esp]",
			"MOV \teax, [esp]",
			"ADD \tesp, 4",
		]
	},
	"Unmask FPU exceptions": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "fpuunmask",
		"description": "Unmask FPU exceptions",
		"body": [
			"; cw\tDW\t0",
			"FSTCW   [cw]",
			"AND     [cw], word 0xFFF0",
			"FLDCW   [cw]",
		]
	},
	"CN to EFLAGS": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "fpueflags",
		"description": "Condition Flags to EFLAGS",
		"body": [
			";PUSH\teax",
			"FSTSW\tax",
			"SAHF",
			";POP\teax"
		]
	},
	"FPU NaNs and infinities": {
		"scope": "nasm, asm, asm-collection, asm-markdown-codeblock, asm-intel-x86-generic",
		"prefix": "FPU_EQU",
		"description": "FPU NaNs/Infinities",
		"body": [
			"FPU_INF_POS\tequ\t0x7F800000",
			"FPU_INF_NEG\tequ\t0xFF800000",
			"FPU_SNaN_POS\tequ\t0x7F800001",
			"FPU_SNaN_NEG\tequ\t0xFF8004F0",
			"FPU_QNaN_POS\tequ\t0x7FC00001",
			"FPU_QNaN_NEG\tequ\t0xFFC004F0"
		]
	}
}